load("@aio_npm//@angular-devkit/architect-cli:index.bzl", "architect", "architect_test")
load("@build_bazel_rules_nodejs//:index.bzl", "npm_package_bin")
load("//aio/tools:defaults.bzl", "nodejs_binary")
load("@aspect_bazel_lib//lib:copy_to_directory.bzl", "copy_to_directory")
load(":local_packages_util.bzl", "link_local_packages", "substitute_local_packages")
load("@bazel_skylib//rules:common_settings.bzl", "bool_flag")

# The write_source_files macro is used to write bazel outputs to the source tree and test that they are up to date.
# See: https://docs.aspect.build/aspect-build/bazel-lib/v0.5.0/docs/docs/write_source_files-docgen.html
load("@aspect_bazel_lib//lib:write_source_files.bzl", generated_files_test = "write_source_files")

exports_files([
    "firebase.json",
    "ngsw-config.template.json",
])

# If set will use first party angular deps for aio targets instead of their npm equivalent
bool_flag(
    name = "flag_aio_local_deps",
    build_setting_default = False,
)

config_setting(
    name = "aio_local_deps",
    flag_values = {
        ":flag_aio_local_deps": "true",
    },
)

# Generate ngsw-config
npm_package_bin(
    name = "ngsw-config",
    outs = ["ngsw-config_generated.json"],
    args = ["$@"],
    tool = "//aio/scripts:build-ngsw-config",
)

# Write ngsw-config to the source directory and test that it's up to date
generated_files_test(
    name = "write-ngsw-config",
    files = {
        "ngsw-config.json": ":ngsw-config",
    },
)

# Run dgeni generation
npm_package_bin(
    name = "dgeni",
    # angular.io-package is a js_library target, which copies sources to $(BINDIR)
    args = ["./$(BINDIR)/aio/tools/transforms/angular.io-package"],
    configuration_env_vars = ["PATH"],  # Need PATH for dgeni package that invokes git
    data = ["//aio/tools/transforms/angular.io-package"],
    env = {
        "BAZEL_DGENI_OUTPUT_PATH": "$(@D)",
    },
    output_dir = True,
    tool = "@aio_npm//dgeni/bin:dgeni",
)

# Copy stackblitz live examples to expected assets location
copy_to_directory(
    name = "stackblitz",
    srcs = ["//aio/content/examples:all-stackblitz"],
    replace_prefixes = {
        "examples": "generated/live-examples",
    },
    root_paths = [
        "aio/content",
    ],
)

# Copy example zips to expected assets location
copy_to_directory(
    name = "example-zips",
    srcs = ["//aio/content/examples:all-example-zips"],
    replace_prefixes = {
        "examples": "generated/zips",
    },
    root_paths = [
        "aio/content",
    ],
)

# All source and configuration files required to build the docs app
APPLICATION_FILES = [
    "angular.json",
    "ngsw-config.json",
    "package.json",
    "tsconfig.app.json",
    "tsconfig.json",
    "tsconfig.worker.json",
    "//aio/src/assets",
    "//aio/src/assets/js",
    ":dgeni",
    ":stackblitz",
    ":example-zips",
] + glob(
    ["src/**/*"],
    exclude = [
        "src/**/*.spec.ts",
        # Temporarily exclude generated sources produced by the non-bazel
        # build until the whole project is built by bazel and this directory
        # isn't needed.
        "src/generated/**/*",
    ],
)

# External dependencies from aio/package.json required to build the docs app.
APPLICATION_DEPS = [
    "@aio_npm//@angular-devkit/build-angular",
    "@aio_npm//@angular/animations",
    "@aio_npm//@angular/cdk",
    "@aio_npm//@angular/cli",
    "@aio_npm//@angular/common",
    "@aio_npm//@angular/compiler",
    "@aio_npm//@angular/core",
    "@aio_npm//@angular/elements",
    "@aio_npm//@angular/forms",
    "@aio_npm//@angular/material",
    "@aio_npm//@angular/platform-browser",
    "@aio_npm//@angular/platform-browser-dynamic",
    "@aio_npm//@angular/router",
    "@aio_npm//@angular/service-worker",
    "@aio_npm//@types/lunr",
    "@aio_npm//@types/trusted-types",
    "@aio_npm//lunr",
    "@aio_npm//rxjs",
    "@aio_npm//safevalues",
    "@aio_npm//tslib",
    "@aio_npm//zone.js",
]

# All sources, specs, and config files required to test the docs app
TEST_FILES = APPLICATION_FILES + [
    "karma.conf.js",
    "tsconfig.spec.json",
] + glob(
    ["src/**/*.spec.ts"],
)

# External dependencies from aio/package.json required to test the docs app
TEST_DEPS = APPLICATION_DEPS + [
    "@aio_npm//@angular/dev-infra-private/bazel/browsers/chromium",
    "@aio_npm//@types/jasmine",
    "@aio_npm//@types/node",
    "@aio_npm//assert",
    "@aio_npm//jasmine",
    "@aio_npm//jasmine-core",
    "@aio_npm//karma-chrome-launcher",
    "@aio_npm//karma-coverage",
    "@aio_npm//karma-jasmine",
    "@aio_npm//karma-jasmine-html-reporter",
    "@aio_npm//timezone-mock",
]

# All sources, specs, and config files required to serve the app
# and run e2e tests against it
E2E_FILES = APPLICATION_FILES + glob(["tests/e2e/**"])

# External dependencies from aio/package.json required by the e2e tests
E2E_DEPS = APPLICATION_DEPS + [
    "@aio_npm//@angular/dev-infra-private/bazel/browsers/chromium",
    "@aio_npm//@types/jasmine",
    "@aio_npm//@types/node",
    "@aio_npm//jasmine-spec-reporter",
    "@aio_npm//protractor",
    "@aio_npm//ts-node",
]

# Stamp npm_link targets for all dependencies that correspond to a
# first-party equivalent pacakge in angular.
link_local_packages(deps = APPLICATION_DEPS)

architect(
    name = "build",
    args = [
        "site:build:stable",
        "--output-path=../$(@D)",
    ],
    chdir = package_name(),
    configuration_env_vars = ["NG_BUILD_CACHE"],
    data = APPLICATION_FILES + select({
        ":aio_local_deps": substitute_local_packages(APPLICATION_DEPS),
        "//conditions:default": APPLICATION_DEPS,
    }),
    output_dir = True,
)

architect_test(
    name = "test",
    args = [
        "site:test",
        "--no-watch",
    ],
    chdir = package_name(),
    configuration_env_vars = ["NG_BUILD_CACHE"],
    data = TEST_FILES + select({
        ":aio_local_deps": substitute_local_packages(TEST_DEPS),
        "//conditions:default": TEST_DEPS,
    }),
    env = {
        "CHROME_BIN": "../$(CHROMIUM)",
    },
    toolchains = [
        "@aio_npm//@angular/dev-infra-private/bazel/browsers/chromium:toolchain_alias",
    ],
)

architect_test(
    name = "e2e",
    args = [
        "site:e2e",
        "--no-webdriver-update",
        "--port=0",
    ],
    chdir = package_name(),
    configuration_env_vars = ["NG_BUILD_CACHE"],
    data = E2E_FILES + select({
        ":aio_local_deps": substitute_local_packages(E2E_DEPS),
        "//conditions:default": E2E_DEPS,
    }),
    env = {
        "CHROME_BIN": "../$(CHROMIUM)",
        "CHROMEDRIVER_BIN": "../$(CHROMEDRIVER)",
    },
    toolchains = [
        "@aio_npm//@angular/dev-infra-private/bazel/browsers/chromium:toolchain_alias",
    ],
)

# Build and serve the app. Run with ibazel to watch for changes and re-serve.
architect(
    name = "serve",
    args = [
        "site:serve",
    ],
    chdir = package_name(),
    data = APPLICATION_FILES + select({
        ":aio_local_deps": substitute_local_packages(APPLICATION_DEPS),
        "//conditions:default": APPLICATION_DEPS,
    }),
    tags = ["ibazel_notify_changes"],
)

# Build and serve the app, watch for changes, and run a fast but low-fidelity
# rebuild when docs change. Watching and serving is a part of the node script,
# so there is no need to run with ibazel, which would be slow as it would redo
# the full dgeni build on each change.

nodejs_binary(
    name = "fast-serve",
    chdir = package_name(),
    data = APPLICATION_FILES + [
        "//aio/scripts:fast-serve-and-watch",
    ] + select({
        ":aio_local_deps": substitute_local_packages(APPLICATION_DEPS),
        "//conditions:default": APPLICATION_DEPS,
    }),
    enable_linker = True,
    entry_point = "//aio/scripts:fast-serve-and-watch.js",
    env = {
        # Tell dgeni packages where the project root is since we used chdir
        "PROJECT_ROOT": "../",

        # Have the authors package output its low-fi dgeni build
        # to a different directory in the runfiles tree because bazel
        # write-protects original dgeni runfiles. Then in angular.json
        # we list this folder last under assets so that it will
        # take precedence over the original dgeni assets, effectively
        # overwriting select sources and then serving them.
        "BAZEL_DGENI_OUTPUT_PATH": "dgeni-fast",
    },
)
