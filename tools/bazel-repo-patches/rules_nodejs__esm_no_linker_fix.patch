diff --git a/internal/node/launcher.sh b/internal/node/launcher.sh
index 9d1e8df4..db31cb45 100644
--- a/internal/node/launcher.sh
+++ b/internal/node/launcher.sh
@@ -331,26 +331,24 @@ if [ "$PATCH_REQUIRE" = true ]; then
     *           ) require_patch_script="${PWD}/${require_patch_script}" ;;
   esac
   LAUNCHER_NODE_OPTIONS+=( "--require" "$require_patch_script" )
-  # Change the entry point to be the loader.cjs script so we run code before node
-  MAIN=$(rlocation "TEMPLATED_loader_script")
-else
-  # Entry point is the user-supplied script
-  MAIN="${PWD}/"TEMPLATED_entry_point_execroot_path
-  # TODO: after we link-all-bins we should not need this extra lookup
-  if [[ ! -e "$MAIN" ]]; then
-    if [ "$FROM_EXECROOT" = true ]; then
-      MAIN="$EXECROOT/"TEMPLATED_entry_point_execroot_path
-    else
-      MAIN=TEMPLATED_entry_point_manifest_path
-    fi
-  fi
-  # Always set up source-map-support using our vendored copy, just like the require_patch_script
-  register_source_map_support=$(rlocation build_bazel_rules_nodejs/third_party/github.com/source-map-support/register.js)
-  LAUNCHER_NODE_OPTIONS+=( "--require" "${register_source_map_support}" )
-  if [[ -n "TEMPLATED_entry_point_main" ]]; then
-    MAIN="${MAIN}/"TEMPLATED_entry_point_main
+fi
+
+# Entry point is the user-supplied script
+MAIN="${PWD}/"TEMPLATED_entry_point_execroot_path
+# TODO: after we link-all-bins we should not need this extra lookup
+if [[ ! -e "$MAIN" ]]; then
+  if [ "$FROM_EXECROOT" = true ]; then
+    MAIN="$EXECROOT/"TEMPLATED_entry_point_execroot_path
+  else
+    MAIN=TEMPLATED_entry_point_manifest_path
   fi
 fi
+# Always set up source-map-support using our vendored copy, just like the require_patch_script
+register_source_map_support=$(rlocation build_bazel_rules_nodejs/third_party/github.com/source-map-support/register.js)
+LAUNCHER_NODE_OPTIONS+=( "--require" "${register_source_map_support}" )
+if [[ -n "TEMPLATED_entry_point_main" ]]; then
+  MAIN="${MAIN}/"TEMPLATED_entry_point_main
+fi
 
 if [ "${SILENT_ON_SUCCESS:-}" = true ]; then
   if [[ -z "${STDOUT_CAPTURE}" ]]; then
@@ -484,3 +482,4 @@ if [[ -n "${EXIT_CODE_CAPTURE}" ]]; then
 else
   exit ${RESULT}
 fi
+
diff --git a/internal/node/loader.cjs b/internal/node/loader.cjs
deleted file mode 100644
index dd7bc0b4..00000000
--- a/internal/node/loader.cjs
+++ /dev/null
@@ -1,39 +0,0 @@
-/**
- * @license
- * Copyright 2017 The Bazel Authors. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- *
- * You may obtain a copy of the License at
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-/**
- * @fileoverview NodeJS module loader for bazel.
- */
-'use strict';
-
-// Ensure that node is added to the path for any subprocess calls
-process.env.PATH = [require('path').dirname(process.execPath), process.env.PATH].join(
-    /^win/i.test(process.platform) ? ';' : ':');
-
-if (require.main === module) {
-  // Set the actual entry point in the arguments list.
-  // argv[0] == node, argv[1] == entry point.
-  // NB: 'TEMPLATED_entry_point_path' & 'TEMPLATED_entry_point' below are replaced during the build process.
-  var entryPointPath = 'TEMPLATED_entry_point_path';
-  var entryPointMain = 'TEMPLATED_entry_point_main';
-  var mainScript = process.argv[1] = entryPointMain ? `${entryPointPath}/${entryPointMain}` : entryPointPath;
-  try {
-    module.constructor._load(mainScript, this, /*isMain=*/true);
-  } catch (e) {
-    console.error(e.stack || e);
-    process.exit(1);
-  }
-}
diff --git a/internal/node/node.bzl b/internal/node/node.bzl
index b4debf8f..d8608c2b 100644
--- a/internal/node/node.bzl
+++ b/internal/node/node.bzl
@@ -117,21 +117,6 @@ def _get_entry_point_file(ctx):
         return ctx.attr.entry_point[DirectoryFilePathInfo].directory
     fail("entry_point must either be a file, or provide DirectoryFilePathInfo")
 
-def _write_loader_script(ctx):
-    substitutions = {}
-    substitutions["TEMPLATED_entry_point_path"] = _ts_to_js(_to_manifest_path(ctx, _get_entry_point_file(ctx)))
-    if DirectoryFilePathInfo in ctx.attr.entry_point:
-        substitutions["TEMPLATED_entry_point_main"] = ctx.attr.entry_point[DirectoryFilePathInfo].path
-    else:
-        substitutions["TEMPLATED_entry_point_main"] = ""
-
-    ctx.actions.expand_template(
-        template = ctx.file._loader_template,
-        output = ctx.outputs.loader_script,
-        substitutions = substitutions,
-        is_executable = True,
-    )
-
 # Avoid using non-normalized paths (workspace/../other_workspace/path)
 def _to_manifest_path(ctx, file):
     if file.short_path.startswith("../"):
@@ -208,8 +193,6 @@ def _nodejs_binary_impl(ctx, data = [], runfiles = [], expanded_args = []):
         node_modules_root = "build_bazel_rules_nodejs/node_modules"
     _write_require_patch_script(ctx, data, node_modules_root)
 
-    _write_loader_script(ctx)
-
     # Provide the target name as an environment variable avaiable to all actions for the
     # runfiles helpers to use.
     env_vars = "export BAZEL_TARGET=%s\n" % ctx.label
@@ -276,7 +259,6 @@ fi
     runfiles = runfiles[:]
     runfiles.extend(node_tool_files)
     runfiles.extend(ctx.files._bash_runfile_helper)
-    runfiles.append(ctx.outputs.loader_script)
     runfiles.append(ctx.outputs.require_patch_script)
 
     # First replace any instances of "$(rlocation " with "$$(rlocation " to preserve
@@ -331,7 +313,6 @@ if (process.cwd() !== __dirname) {
         "TEMPLATED_expected_exit_code": str(expected_exit_code),
         "TEMPLATED_lcov_merger_script": _to_manifest_path(ctx, ctx.file._lcov_merger_script),
         "TEMPLATED_link_modules_script": _to_manifest_path(ctx, ctx.file._link_modules_script),
-        "TEMPLATED_loader_script": _to_manifest_path(ctx, ctx.outputs.loader_script),
         "TEMPLATED_modules_manifest": _to_manifest_path(ctx, node_modules_manifest),
         "TEMPLATED_node_patches_script": _to_manifest_path(ctx, ctx.file._node_patches_script),
         "TEMPLATED_require_patch_script": _to_manifest_path(ctx, ctx.outputs.require_patch_script),
@@ -378,7 +359,6 @@ if (process.cwd() !== __dirname) {
             runfiles = ctx.runfiles(
                 transitive_files = depset(runfiles),
                 files = node_tool_files + [
-                            ctx.outputs.loader_script,
                             ctx.outputs.require_patch_script,
                         ] + ctx.files._source_map_support_files +
 
@@ -642,7 +622,6 @@ Predefined genrule variables are not supported in this context.
 
 _NODEJS_EXECUTABLE_OUTPUTS = {
     "launcher_sh": "%{name}.sh",
-    "loader_script": "%{name}_loader.cjs",
     "require_patch_script": "%{name}_require_patch.cjs",
 }
 